generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  imageUrl           String
  username           String               @unique
  ConversationMember ConversationMember[]
  Friends            Friends[]            @relation("userFriends")
  FriendOf           Friends[]            @relation("friendUsers")
  Message            Message[]
  SentRequests       Request[]            @relation("SentRequests")
  ReceivedRequests   Request[]            @relation("ReceivedRequests")
}

model Request {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  Sender     User     @relation("SentRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  Receiver   User     @relation("ReceivedRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Friends {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  userId         String
  friendId       String
  conversationId String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  User           User         @relation("userFriends", fields: [friendId], references: [id], onDelete: Cascade)
  Friend         User         @relation("friendUsers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Conversation {
  id                   String               @id @default(cuid())
  name                 String?
  isGroup              Boolean
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  lastMessageId        String?
  LastMessageSent      Message?             @relation("LastMessageSent", fields: [lastMessageId], references: [id])
  ConversationMember   ConversationMember[]
  Friends              Friends[]
  ConversationMessages Message[]            @relation("ConversationMessages")
}

model ConversationMember {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  memberId          String
  conversationId    String
  lastSeenMessageId String?
  Conversation      Conversation @relation(fields: [conversationId], references: [id])
  Message           Message?     @relation(fields: [lastSeenMessageId], references: [id])
  User              User         @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, conversationId])
}

model Message {
  id                      String               @id @default(cuid())
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @default(now())
  senderSocketId          String?
  senderId                String
  conversationId          String
  type                    String
  content                 String[]
  ConversationLastMessage Conversation[]       @relation("LastMessageSent")
  ConversationMember      ConversationMember[]
  ConversationMessages    Conversation         @relation("ConversationMessages", fields: [conversationId], references: [id])
  User                    User                 @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
