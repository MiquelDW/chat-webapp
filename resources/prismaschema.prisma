generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime
    imageUrl  String
    username  String   @unique

    // creates a bidirectional many-to-many relationship between users/friends through two one-to-many relationships
    // one-to-many relationships: one user can have multiple friends, and each friend can also be friends with multiple users
    Friends  Friends[] @relation("userFriends")
    FriendOf Friends[] @relation("friendUsers")

    // one-to-many relationships: one user can send and receive multiple friends to / from other suers
    SentRequests     Request[] @relation("SentRequests")
    ReceivedRequests Request[] @relation("ReceivedRequests")

    // one-to-many relationship: one user can be a member of multiple conversations
    Message Message[]

    // one-to-many relationship: one user can send multiple messages in a conversation
    ConversationMember ConversationMember[]
}

model Request {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    // fk's stores the users that send adn received a friend request 
    senderId   String
    receiverId String

    // many-to-one relationships: many friend requests can be send and received by one user
    Sender   User @relation("SentRequests", fields: [receiverId], references: [id], onDelete: Cascade)
    Receiver User @relation("ReceivedRequests", fields: [senderId], references: [id], onDelete: Cascade)

    // unique rule for the combination of 'senderId' and 'receiverId'
    // user can send only one friend request to another user at a time
    // user can receive only one friend request from another user at a time
    @@unique([senderId, receiverId])
}

model Friends {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    // fk stores the user that accepted the friend request
    userId         String
    // fk stores the user that has been accepted by the user that accepted the friend request
    friendId       String
    // store the current conversation that the two users/friends are having
    conversationId String

    // many-to-one relationships: many friends are connected to one user, and each friend is connected to many friends as well
    User   User @relation("userFriends", fields: [friendId], references: [id], onDelete: Cascade)
    Friend User @relation("friendUsers", fields: [userId], references: [id], onDelete: Cascade)

    // many-to-one relationship: many friends belong to one conversation\
    Conversation Conversation @relation(fields: [conversationId], references: [id])

    // ensures unique pairs of users and friends, preventing duplicate friendships
    @@unique([userId, friendId])
}

model Conversation {
    id            String   @id @default(cuid())
    name          String?
    isGroup       Boolean
    createdAt     DateTime @default(now())
    updatedAt     DateTime
    // fk stores and keeps track of the last message sent in a conversation
    // optional because it's possible that a conversation has no messages 
    lastMessageId String?

    // optional one-to-one relationship: each conversation has one last message sent
    LastMessageSent      Message?  @relation("LastMessageSent", fields: [lastMessageId], references: [id])
    // one-to-many relationship: a conversation can have multiple messages
    ConversationMessages Message[] @relation("ConversationMessages")

    // many-to-many relationship between conversations and users
    // one-to-many relationship: a conversation can have multiple convo-members
    ConversationMember ConversationMember[]
    // one-to-many relationship: a conversation can have multiple friendships
    Friends            Friends[]
}

model ConversationMember {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    // fk stores a user's id that's a member of a conversation
    memberId          String
    // fk stores the conversation a user is part of
    conversationId    String
    // fk stores the message a user has seen last in the conversation
    lastSeenMessageId String?

    // many-to-one relationship: many users can be a convo-member of one conversation
    User User @relation(fields: [memberId], references: [id], onDelete: Cascade)

    // many-to-one relationship: many convo-members belong to one conversation 
    Conversation Conversation @relation(fields: [conversationId], references: [id])

    // optional one-to-one relationship: only one message can be the last message sent by one conversation member
    Message Message? @relation(fields: [lastSeenMessageId], references: [id])

    // ensures unique pairs of members and conversations, prevents duplicate members
    // a single user cannot be added to the same conversation more than once
    @@unique([memberId, conversationId])
}

model Message {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime
    // fk stores the user that sent the message in a conversation
    senderId       String
    // fk stores the conversation where the message was sent
    conversationId String
    // 'type' of message (text, img, file, vid etc) and the message's 'content'
    type           String
    content        String[]

    // one-to-one relationship: one message can be the last message of only one conversation
    ConversationLastMessage Conversation[] @relation("LastMessageSent")
    // many-to-one relationship: many messages belong to one conversation
    ConversationMessages    Conversation   @relation("ConversationMessages", fields: [conversationId], references: [id])

    // optional one-to-one relationship: only one message can be the last message sent by one conversation member
    ConversationMember ConversationMember[]

    // many-to-one relationship: many messages can be send by one user
    User User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
